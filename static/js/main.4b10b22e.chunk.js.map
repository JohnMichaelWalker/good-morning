{"version":3,"sources":["utils/tempUtils.js","utils/dateUtils.js","utils/weatherUtils.js","components/weatherMoment.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["TempUtils","celsius","DateUtils","unixTimeSeconds","Date","toLocaleString","timeZone","WeatherUtils","iconCode","console","log","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","WeatherMoment","_ref","data","classes","react_default","a","createElement","Paper","className","Grid","container","item","xs","img","alt","src","getWeatherIconUrl","weather","icon","Typography","variant","toUkDate","dt","toTimeString","substring","kelvinToCelsius","main","temp","toFixed","description","Weather","weatherData","Array","from","length","x","i","map","weatherMoment","App","state","_this2","this","fetch","then","res","json","setState","list","catch","Component","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b10b22e.chunk.js","sourcesContent":["export default class TempUtils {\r\n    static kelvinToCelsius(celsius) {\r\n        return celsius - 273.15\r\n    }\r\n}\r\n","export default class DateUtils {\r\n    static toUkDate(unixTimeSeconds) {\r\n        return new Date(\r\n            new Date(unixTimeSeconds * 1000)\r\n              .toLocaleString('en-GB', { timeZone: 'Europe/London' })\r\n            )\r\n    }\r\n}\r\n\r\n","export default class WeatherUtils {\r\n    static getWeatherIconUrl(iconCode) {\r\n        console.log(iconCode)\r\n        return \"http://openweathermap.org/img/wn/\"+ iconCode + \"@2x.png\"\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TempUtils from '../utils/tempUtils';\r\nimport DateUtils from '../utils/dateUtils';\r\nimport WeatherUtils from '../utils/weatherUtils';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n    flexGrow: 1,\r\n    },\r\n    paper: {\r\n    padding: theme.spacing(0),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\n\r\nconst WeatherMoment = ({ data }) => {\r\n    const classes = useStyles();\r\n    \r\n    if (data) {\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={4}>\r\n                        <img className={classes.img} alt=\"complex\" src={WeatherUtils.getWeatherIconUrl(data.weather[0].icon)} />\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h5\">\r\n                                    {DateUtils.toUkDate(data.dt).toTimeString().substring(0, 5)}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {TempUtils.kelvinToCelsius(data.main.temp).toFixed(0) + \"Â°C\" }\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography  variant=\"subtitle1\">\r\n                            {data.weather[0].description}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n    \r\n};\r\n\r\nexport default WeatherMoment","import React from 'react';\r\nimport TempUtils from '../utils/tempUtils';\r\nimport DateUtils from '../utils/dateUtils';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport WeatherMoment from './weatherMoment';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      padding: 10,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(1),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  }));\r\n  \r\n\r\nconst Weather = ({ weatherData }) => {\r\n    const classes = useStyles();\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                <Grid container spacing={2}>\r\n                    {Array.from({length: 6}, (x,i) => i).map(i => (\r\n                        <Grid item xs={2}>\r\n                            <WeatherMoment data={weatherData[i]}/>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Weather","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Weather from './components/weather';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    weatherData: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=London,uk&appid=a675333fccbf6d2d89d2e68a1b5265a2\")\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      this.setState({ weatherData: data.list })\r\n    })\r\n    .catch(\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Weather weatherData={this.state.weatherData} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"react-mdl/extra/material.css\";\r\nimport \"react-mdl/extra/material.js\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}